//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 2014-07-02 13:10:36
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("CountryAndLanguageModel", "countrylanguage_countrycode_fkey", "Country", RelationshipMultiplicity.One, typeof(CountryAndLanguageModel.Country), "Countrylanguages", RelationshipMultiplicity.Many, typeof(CountryAndLanguageModel.Countrylanguage), true)]

#endregion

namespace CountryAndLanguageModel
{

    #region CountryAndLanguageEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class CountryAndLanguageEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new CountryAndLanguageEntities object.
        /// </summary>
        public CountryAndLanguageEntities() : 
                base(@"name=Ddehqcgsacci3gEntitiesConnectionString", "CountryAndLanguageEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new CountryAndLanguageEntities object using the connection string found in the 'CountryAndLanguageEntities' section of the application configuration file.
        /// </summary>
        public CountryAndLanguageEntities(string connectionString) : 
                base(connectionString, "CountryAndLanguageEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new CountryAndLanguageEntities object.
        /// </summary>
        public CountryAndLanguageEntities(EntityConnection connection) : base(connection, "CountryAndLanguageEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Countrylanguage> Countrylanguages
        {
            get
            {
                if ((_Countrylanguages == null))
                {
                    _Countrylanguages = base.CreateObjectSet<Countrylanguage>("Countrylanguages");
                }
                return _Countrylanguages;
            }
        }
        private ObjectSet<Countrylanguage> _Countrylanguages;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Countrylanguages EntitySet.
        /// </summary>
        public void AddToCountrylanguages(Countrylanguage countrylanguage)
        {
            base.AddObject("Countrylanguages", countrylanguage);
        }

        #endregion
    }

    #endregion
}

namespace CountryAndLanguageModel
{

    /// <summary>
    /// There are no comments for CountryAndLanguageModel.Country in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Code
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="CountryAndLanguageModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="code">Initial value of Code.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="continent">Initial value of Continent.</param>
        /// <param name="region">Initial value of Region.</param>
        /// <param name="surfacearea">Initial value of Surfacearea.</param>
        /// <param name="population">Initial value of Population.</param>
        /// <param name="localname">Initial value of Localname.</param>
        /// <param name="governmentform">Initial value of Governmentform.</param>
        /// <param name="code2">Initial value of Code2.</param>
        public static Country CreateCountry(string code, string name, string continent, string region, float surfacearea, int population, string localname, string governmentform, string code2)
        {
            Country country = new Country();
            country.Code = code;
            country.Name = name;
            country.Continent = continent;
            country.Region = region;
            country.Surfacearea = surfacearea;
            country.Population = population;
            country.Localname = localname;
            country.Governmentform = governmentform;
            country.Code2 = code2;
            return country;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string Code
        {
            get
            {
                string value = _Code;
                OnGetCode(ref value);
                return value;
            }
            set
            {
                if (_Code != value)
                {
                  OnCodeChanging(ref value);
                  ReportPropertyChanging("Code");
                  _Code = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Code");
                  OnCodeChanged();
              }
            }
        }
        private string _Code;
        partial void OnGetCode(ref string value);
        partial void OnCodeChanging(ref string value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Continent in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Continent
        {
            get
            {
                string value = _Continent;
                OnGetContinent(ref value);
                return value;
            }
            set
            {
                if (_Continent != value)
                {
                  OnContinentChanging(ref value);
                  ReportPropertyChanging("Continent");
                  _Continent = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Continent");
                  OnContinentChanged();
              }
            }
        }
        private string _Continent;
        partial void OnGetContinent(ref string value);
        partial void OnContinentChanging(ref string value);
        partial void OnContinentChanged();
    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Region
        {
            get
            {
                string value = _Region;
                OnGetRegion(ref value);
                return value;
            }
            set
            {
                if (_Region != value)
                {
                  OnRegionChanging(ref value);
                  ReportPropertyChanging("Region");
                  _Region = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Region");
                  OnRegionChanged();
              }
            }
        }
        private string _Region;
        partial void OnGetRegion(ref string value);
        partial void OnRegionChanging(ref string value);
        partial void OnRegionChanged();
    
        /// <summary>
        /// There are no comments for Surfacearea in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public float Surfacearea
        {
            get
            {
                float value = _Surfacearea;
                OnGetSurfacearea(ref value);
                return value;
            }
            set
            {
                if (_Surfacearea != value)
                {
                  OnSurfaceareaChanging(ref value);
                  ReportPropertyChanging("Surfacearea");
                  _Surfacearea = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Surfacearea");
                  OnSurfaceareaChanged();
              }
            }
        }
        private float _Surfacearea;
        partial void OnGetSurfacearea(ref float value);
        partial void OnSurfaceareaChanging(ref float value);
        partial void OnSurfaceareaChanged();
    
        /// <summary>
        /// There are no comments for Indepyear in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<short> Indepyear
        {
            get
            {
                global::System.Nullable<short> value = _Indepyear;
                OnGetIndepyear(ref value);
                return value;
            }
            set
            {
                if (_Indepyear != value)
                {
                  OnIndepyearChanging(ref value);
                  ReportPropertyChanging("Indepyear");
                  _Indepyear = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Indepyear");
                  OnIndepyearChanged();
              }
            }
        }
        private global::System.Nullable<short> _Indepyear;
        partial void OnGetIndepyear(ref global::System.Nullable<short> value);
        partial void OnIndepyearChanging(ref global::System.Nullable<short> value);
        partial void OnIndepyearChanged();
    
        /// <summary>
        /// There are no comments for Population in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int Population
        {
            get
            {
                int value = _Population;
                OnGetPopulation(ref value);
                return value;
            }
            set
            {
                if (_Population != value)
                {
                  OnPopulationChanging(ref value);
                  ReportPropertyChanging("Population");
                  _Population = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Population");
                  OnPopulationChanged();
              }
            }
        }
        private int _Population;
        partial void OnGetPopulation(ref int value);
        partial void OnPopulationChanging(ref int value);
        partial void OnPopulationChanged();
    
        /// <summary>
        /// There are no comments for Lifeexpectancy in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<float> Lifeexpectancy
        {
            get
            {
                global::System.Nullable<float> value = _Lifeexpectancy;
                OnGetLifeexpectancy(ref value);
                return value;
            }
            set
            {
                if (_Lifeexpectancy != value)
                {
                  OnLifeexpectancyChanging(ref value);
                  ReportPropertyChanging("Lifeexpectancy");
                  _Lifeexpectancy = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Lifeexpectancy");
                  OnLifeexpectancyChanged();
              }
            }
        }
        private global::System.Nullable<float> _Lifeexpectancy;
        partial void OnGetLifeexpectancy(ref global::System.Nullable<float> value);
        partial void OnLifeexpectancyChanging(ref global::System.Nullable<float> value);
        partial void OnLifeexpectancyChanged();
    
        /// <summary>
        /// There are no comments for Gnp in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> Gnp
        {
            get
            {
                global::System.Nullable<decimal> value = _Gnp;
                OnGetGnp(ref value);
                return value;
            }
            set
            {
                if (_Gnp != value)
                {
                  OnGnpChanging(ref value);
                  ReportPropertyChanging("Gnp");
                  _Gnp = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Gnp");
                  OnGnpChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _Gnp;
        partial void OnGetGnp(ref global::System.Nullable<decimal> value);
        partial void OnGnpChanging(ref global::System.Nullable<decimal> value);
        partial void OnGnpChanged();
    
        /// <summary>
        /// There are no comments for Gnpold in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> Gnpold
        {
            get
            {
                global::System.Nullable<decimal> value = _Gnpold;
                OnGetGnpold(ref value);
                return value;
            }
            set
            {
                if (_Gnpold != value)
                {
                  OnGnpoldChanging(ref value);
                  ReportPropertyChanging("Gnpold");
                  _Gnpold = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Gnpold");
                  OnGnpoldChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _Gnpold;
        partial void OnGetGnpold(ref global::System.Nullable<decimal> value);
        partial void OnGnpoldChanging(ref global::System.Nullable<decimal> value);
        partial void OnGnpoldChanged();
    
        /// <summary>
        /// There are no comments for Localname in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Localname
        {
            get
            {
                string value = _Localname;
                OnGetLocalname(ref value);
                return value;
            }
            set
            {
                if (_Localname != value)
                {
                  OnLocalnameChanging(ref value);
                  ReportPropertyChanging("Localname");
                  _Localname = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Localname");
                  OnLocalnameChanged();
              }
            }
        }
        private string _Localname;
        partial void OnGetLocalname(ref string value);
        partial void OnLocalnameChanging(ref string value);
        partial void OnLocalnameChanged();
    
        /// <summary>
        /// There are no comments for Governmentform in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Governmentform
        {
            get
            {
                string value = _Governmentform;
                OnGetGovernmentform(ref value);
                return value;
            }
            set
            {
                if (_Governmentform != value)
                {
                  OnGovernmentformChanging(ref value);
                  ReportPropertyChanging("Governmentform");
                  _Governmentform = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Governmentform");
                  OnGovernmentformChanged();
              }
            }
        }
        private string _Governmentform;
        partial void OnGetGovernmentform(ref string value);
        partial void OnGovernmentformChanging(ref string value);
        partial void OnGovernmentformChanged();
    
        /// <summary>
        /// There are no comments for Headofstate in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Headofstate
        {
            get
            {
                string value = _Headofstate;
                OnGetHeadofstate(ref value);
                return value;
            }
            set
            {
                if (_Headofstate != value)
                {
                  OnHeadofstateChanging(ref value);
                  ReportPropertyChanging("Headofstate");
                  _Headofstate = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Headofstate");
                  OnHeadofstateChanged();
              }
            }
        }
        private string _Headofstate;
        partial void OnGetHeadofstate(ref string value);
        partial void OnHeadofstateChanging(ref string value);
        partial void OnHeadofstateChanged();
    
        /// <summary>
        /// There are no comments for Capital in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Capital
        {
            get
            {
                global::System.Nullable<int> value = _Capital;
                OnGetCapital(ref value);
                return value;
            }
            set
            {
                if (_Capital != value)
                {
                  OnCapitalChanging(ref value);
                  ReportPropertyChanging("Capital");
                  _Capital = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Capital");
                  OnCapitalChanged();
              }
            }
        }
        private global::System.Nullable<int> _Capital;
        partial void OnGetCapital(ref global::System.Nullable<int> value);
        partial void OnCapitalChanging(ref global::System.Nullable<int> value);
        partial void OnCapitalChanged();
    
        /// <summary>
        /// There are no comments for Code2 in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Code2
        {
            get
            {
                string value = _Code2;
                OnGetCode2(ref value);
                return value;
            }
            set
            {
                if (_Code2 != value)
                {
                  OnCode2Changing(ref value);
                  ReportPropertyChanging("Code2");
                  _Code2 = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Code2");
                  OnCode2Changed();
              }
            }
        }
        private string _Code2;
        partial void OnGetCode2(ref string value);
        partial void OnCode2Changing(ref string value);
        partial void OnCode2Changed();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Countrylanguages in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CountryAndLanguageModel", "countrylanguage_countrycode_fkey", "Countrylanguages")]
        public EntityCollection<Countrylanguage> Countrylanguages
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Countrylanguage>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Countrylanguages");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Countrylanguage>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Countrylanguages", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for CountryAndLanguageModel.Countrylanguage in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Countrycode
    /// Language
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="CountryAndLanguageModel", Name="Countrylanguage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Countrylanguage : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Countrylanguage object.
        /// </summary>
        /// <param name="countrycode">Initial value of Countrycode.</param>
        /// <param name="language">Initial value of Language.</param>
        /// <param name="isofficial">Initial value of Isofficial.</param>
        /// <param name="percentage">Initial value of Percentage.</param>
        public static Countrylanguage CreateCountrylanguage(string countrycode, string language, bool isofficial, float percentage)
        {
            Countrylanguage countrylanguage = new Countrylanguage();
            countrylanguage.Countrycode = countrycode;
            countrylanguage.Language = language;
            countrylanguage.Isofficial = isofficial;
            countrylanguage.Percentage = percentage;
            return countrylanguage;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Countrycode in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string Countrycode
        {
            get
            {
                string value = _Countrycode;
                OnGetCountrycode(ref value);
                return value;
            }
            set
            {
                if (_Countrycode != value)
                {
                  OnCountrycodeChanging(ref value);
                  ReportPropertyChanging("Countrycode");
                  _Countrycode = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Countrycode");
                  OnCountrycodeChanged();
              }
            }
        }
        private string _Countrycode;
        partial void OnGetCountrycode(ref string value);
        partial void OnCountrycodeChanging(ref string value);
        partial void OnCountrycodeChanged();
    
        /// <summary>
        /// There are no comments for Language in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string Language
        {
            get
            {
                string value = _Language;
                OnGetLanguage(ref value);
                return value;
            }
            set
            {
                if (_Language != value)
                {
                  OnLanguageChanging(ref value);
                  ReportPropertyChanging("Language");
                  _Language = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Language");
                  OnLanguageChanged();
              }
            }
        }
        private string _Language;
        partial void OnGetLanguage(ref string value);
        partial void OnLanguageChanging(ref string value);
        partial void OnLanguageChanged();
    
        /// <summary>
        /// There are no comments for Isofficial in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public bool Isofficial
        {
            get
            {
                bool value = _Isofficial;
                OnGetIsofficial(ref value);
                return value;
            }
            set
            {
                if (_Isofficial != value)
                {
                  OnIsofficialChanging(ref value);
                  ReportPropertyChanging("Isofficial");
                  _Isofficial = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Isofficial");
                  OnIsofficialChanged();
              }
            }
        }
        private bool _Isofficial;
        partial void OnGetIsofficial(ref bool value);
        partial void OnIsofficialChanging(ref bool value);
        partial void OnIsofficialChanged();
    
        /// <summary>
        /// There are no comments for Percentage in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public float Percentage
        {
            get
            {
                float value = _Percentage;
                OnGetPercentage(ref value);
                return value;
            }
            set
            {
                if (_Percentage != value)
                {
                  OnPercentageChanging(ref value);
                  ReportPropertyChanging("Percentage");
                  _Percentage = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Percentage");
                  OnPercentageChanged();
              }
            }
        }
        private float _Percentage;
        partial void OnGetPercentage(ref float value);
        partial void OnPercentageChanging(ref float value);
        partial void OnPercentageChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CountryAndLanguageModel", "countrylanguage_countrycode_fkey", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Country").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Country");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Country", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("CountryAndLanguageModel.countrylanguage_countrycode_fkey", "Country").Value = null;
                }
            }
        }

        #endregion
    }

}
