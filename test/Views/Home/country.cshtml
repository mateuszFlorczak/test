@model List<countrylanguage>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var countryLanguages = Model;
    ViewBag.Header = "Language use in " + ViewBag.CountryName;
    float percent = 0;
}
<br /><br />
<script type="text/javascript">
    data = new Array();
    data2 = new Array();
    function init(name, value)
    {
        tmp = { "label": name, "value": parseFloat(value) };
        data.push(tmp);
        tmp = { "label": value, "value": parseFloat(value) };
        data2.push(tmp);
    }
    function myFunc() {
        var w = 400,                        //width
        h = 400,                            //height
        r = 100,                            //radius
        color = d3.scale.category20c();     //builtin range of colors

        var vis = d3.select(".content")
            .append("svg:svg")              //create the SVG element inside the <body>
            .data([data])                   //associate our data with the document
                .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
                .attr("height", h)
            .append("svg:g")                //make a group to hold our pie chart
                .attr("transform", "translate(" + (r + 100) + "," + (r + 100) + ")")    //move the center of the pie chart from 0, 0 to radius, radius

        var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
            .outerRadius(r);

        var pie = d3.layout.pie()           //this will create arc data for us given a list of values
            .value(function (d) { return d.value; });    //we must tell it out to access the value of each element in our data array

        var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
            .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
            .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
                .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                    .attr("class", "slice");    //allow us to style things in the slices (like text)

        arcs.append("svg:path")
                .attr("fill", function (d, i) { return color(i); }) //set the color for each slice to be chosen from the color function defined above
                .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

        arcs.append("svg:text")                                     //add a label to each slice
        .attr("transform", function (d) {
            d.innerRadius = 0;
            d.outerRadius = r;
            var c = arc.centroid(d),
                x = c[0],
                y = c[1],
                // pythagorean theorem for hypotenuse
                nh = Math.sqrt(x*x + y*y);
            return "translate(" + (x/nh * (r + 10)) +  ',' +
               (y/nh * (r + 20)) +  ")";
        })
        .attr("text-anchor", function (d) {
            var rads = ((d.endAngle - d.startAngle) / 2) + d.startAngle;
            if ((rads > 7 * Math.PI / 4 && rads < Math.PI / 4) || (rads > 3 * Math.PI / 4 && rads < 5 * Math.PI / 4)) {
                return "middle";
            } else if (rads >= Math.PI / 4 && rads <= 3 * Math.PI / 4) {
                return "start";
            } else if (rads >= 5 * Math.PI / 4 && rads <= 7 * Math.PI / 4) {
                return "end";
            } else {
                return "middle";
            }
        })
            .attr("display", function (d) {
                if ((d.endAngle - d.startAngle) < Math.PI / 20)
                    return "none";
        })
        .text(function (d, i) { return data[i].label; });

        arcs.append("svg:text")                                     //add a label to each slice
        .attr("transform", function (d) {                    //set the label's origin to the center of the arc
            //we have to make sure to set these before calling arc.centroid
            d.innerRadius = 0;
            d.outerRadius = r;
            return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
        })
            .attr("display", function (d) {
                if ((d.endAngle - d.startAngle) < Math.PI / 20)
                    return "none";
        })
            .attr("text-anchor", "middle")                          //center the text on it's origin
            .text(function (d, i) { return data2[i].label; });        //get the label from our original data array
    }
    @{
        for (int i = 0; i < Model.Count; ++i )
        {
            percent += Model[i].percentage;
            @:init('@(Model[i].language)', '@(Model[i].percentage)');
        }
        if(percent < 100)
        { 
            percent = 100 - percent;
            percent = (float)Math.Round(percent, 2);
            @:init("other", '@(percent)');
        }
    }
    myFunc();
</script>
@section footer{
    &copy; Made by Mateusz Florczak for Kainos
}
